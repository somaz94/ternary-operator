name: Example Workflow using Ternary Operator Action

on:
  workflow_dispatch:
    inputs:
      run:
        description: 'workflow run'
        required: true
        default: 'true'
      environment:
        type: environment
        description: Select the environment
        required: false
      branch:
        type: choice
        options:
          - qa
          - dev
        description: Select the branch
        required: false
        default: qa
      test:
        type: string
        description: Select the test
        required: false
      service:
        description: Which service to be built. game or batch or etc...
        required: false
        type: choice
        options:
          - game
          - batch
      env:
        type: string
        description: Select the env
        required: false
  workflow_run:
    workflows: ["Create release"]
    types:
      - completed

permissions:
  contents: read

jobs:
  action-module:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set Variable
        id: set_vars
        uses: somaz94/env-output-setter@v1
        with:
          env_key: 'SERVICE,ENVIRONMENT,TEST,ENV,BRANCH'
          env_value: "${{ github.event.inputs.service || 'game' }},${{ github.event.inputs.environment || 'qa' }},${{ github.event.inputs.test || 'prod' }},${{ github.event.inputs.env || 'xov' }},${{ github.event.inputs.branch || 'qa' }}"
          output_key: 'SERVICE,ENVIRONMENT,TEST,ENV,BRANCH'
          output_value: "${{ github.event.inputs.service || 'game' }},${{ github.event.inputs.environment || 'qa' }},${{ github.event.inputs.test || 'prod' }},${{ github.event.inputs.env || 'xov' }},${{ github.event.inputs.branch || 'qa' }}"

      - name: Set Environment Variables
        run: |
          {
            echo "SERVICE=${{ steps.set_vars.outputs.SERVICE }}"
            echo "ENVIRONMENT=${{ steps.set_vars.outputs.ENVIRONMENT }}"
            echo "TEST=${{ steps.set_vars.outputs.TEST }}"
            echo "ENV=${{ steps.set_vars.outputs.ENV }}"
            echo "BRANCH=${{ steps.set_vars.outputs.BRANCH }}"
          } >> $GITHUB_ENV

      - name: Evaluate Conditions
        uses: somaz94/ternary-operator@v1
        id: ternary
        with:
          conditions: >-
            SERVICE IN game,batch,api,
            ENVIRONMENT == dev,
            TEST == prod,
            ENV IN xov,dev,qa,
            BRANCH == dev,
            SERVICE == game,
            ENVIRONMENT == qa,
            TEST == stage,
            ENV == dev,
            BRANCH IN main,develop
          true_values: >-
            service-true,environment-true,test-true,env-true,branch-true,
            service-true-2,environment-true-2,test-true-2,env-true-2,branch-true-2
          false_values: >-
            service-false,environment-false,test-false,env-false,branch-false,
            service-false-2,environment-false-2,test-false-2,env-false-2,branch-false-2
          debug_mode: true

      - name: Test Comparison Operators
        id: ternary_comparison
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            SERVICE == game,
            SERVICE != batch,
            ENVIRONMENT == qa
          true_values: >-
            equal-pass,not-equal-pass,qa-pass
          false_values: >-
            equal-fail,not-equal-fail,qa-fail
          debug_mode: true

      - name: Test Logical Operators
        id: ternary_logical
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            SERVICE == game && ENVIRONMENT == qa,
            SERVICE == game || SERVICE == batch,
            BRANCH == qa && ENV == xov
          true_values: >-
            and-pass,or-pass,both-pass
          false_values: >-
            and-fail,or-fail,both-fail
          debug_mode: true

      - name: Test IN Operator
        id: ternary_in
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            SERVICE IN game,batch,api,
            ENVIRONMENT IN dev,qa,stage,prod,
            BRANCH IN main,develop,qa
          true_values: >-
            service-in-pass,env-in-pass,branch-in-pass
          false_values: >-
            service-in-fail,env-in-fail,branch-in-fail
          debug_mode: true

      - name: Test Mixed Operators
        id: ternary_mixed
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            SERVICE IN game,batch && ENVIRONMENT == qa,
            SERVICE == game || BRANCH IN main,develop,
            ENV == xov && TEST == prod
          true_values: >-
            mixed-1-pass,mixed-2-pass,mixed-3-pass
          false_values: >-
            mixed-1-fail,mixed-2-fail,mixed-3-fail
          debug_mode: true

      - name: Test CONTAINS Operator
        id: ternary_contains
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            BRANCH CONTAINS qa,
            SERVICE CONTAINS gam,
            ENVIRONMENT CONTAINS a
          true_values: >-
            contains-1-pass,contains-2-pass,contains-3-pass
          false_values: >-
            contains-1-fail,contains-2-fail,contains-3-fail
          debug_mode: true

      - name: Test NOT Operator
        id: ternary_not
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            NOT (SERVICE == batch),
            NOT (ENVIRONMENT == dev),
            NOT (BRANCH IN main,develop)
          true_values: >-
            not-1-pass,not-2-pass,not-3-pass
          false_values: >-
            not-1-fail,not-2-fail,not-3-fail
          debug_mode: true

      - name: Test EMPTY Operator
        id: ternary_empty
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            UNDEFINED_VAR EMPTY,
            SERVICE EMPTY,
            BRANCH EMPTY
          true_values: >-
            empty-1-pass,empty-2-pass,empty-3-pass
          false_values: >-
            empty-1-fail,empty-2-fail,empty-3-fail
          debug_mode: true

      - name: Test NOT_EMPTY Operator
        id: ternary_not_empty
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            SERVICE NOT_EMPTY,
            ENVIRONMENT NOT_EMPTY,
            UNDEFINED_VAR NOT_EMPTY
          true_values: >-
            not-empty-1-pass,not-empty-2-pass,not-empty-3-pass
          false_values: >-
            not-empty-1-fail,not-empty-2-fail,not-empty-3-fail
          debug_mode: true

      - name: Test Combined New Operators
        id: ternary_combined
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            BRANCH CONTAINS qa && SERVICE NOT_EMPTY,
            NOT (SERVICE IN batch,api) && ENVIRONMENT == qa,
            SERVICE NOT_EMPTY || UNDEFINED_VAR EMPTY
          true_values: >-
            combined-1-pass,combined-2-pass,combined-3-pass
          false_values: >-
            combined-1-fail,combined-2-fail,combined-3-fail
          debug_mode: true

      - name: Test Error Case (Exceeding Maximum Conditions)
        id: ternary_error
        continue-on-error: true
        uses: somaz94/ternary-operator@v1
        with:
          conditions: >-
            SERVICE == game,
            ENVIRONMENT == dev,
            TEST == prod,
            ENV == xov,
            BRANCH == dev,
            SERVICE IN game,batch,
            ENVIRONMENT == qa,
            TEST == stage,
            ENV == dev,
            BRANCH IN main,develop,
            EXTRA == test
          true_values: >-
            1,2,3,4,5,6,7,8,9,10,11
          false_values: >-
            1,2,3,4,5,6,7,8,9,10,11
          
      - name: Print Output
        run: |
          echo "=== Main Conditions Test ==="
          echo "First condition result: ${{ steps.ternary.outputs.output_1 }}"
          echo "Second condition result: ${{ steps.ternary.outputs.output_2 }}"
          echo "Third condition result: ${{ steps.ternary.outputs.output_3 }}"
          echo "Fourth condition result: ${{ steps.ternary.outputs.output_4 }}"
          echo "Fifth condition result: ${{ steps.ternary.outputs.output_5 }}"
          echo "Sixth condition result: ${{ steps.ternary.outputs.output_6 }}"
          echo "Seventh condition result: ${{ steps.ternary.outputs.output_7 }}"
          echo "Eighth condition result: ${{ steps.ternary.outputs.output_8 }}"
          echo "Ninth condition result: ${{ steps.ternary.outputs.output_9 }}"
          echo "Tenth condition result: ${{ steps.ternary.outputs.output_10 }}"
          
          echo ""
          echo "=== Comparison Operators Test ==="
          echo "Equal: ${{ steps.ternary_comparison.outputs.output_1 }}"
          echo "Not Equal: ${{ steps.ternary_comparison.outputs.output_2 }}"
          echo "QA Check: ${{ steps.ternary_comparison.outputs.output_3 }}"
          
          echo ""
          echo "=== Logical Operators Test ==="
          echo "AND: ${{ steps.ternary_logical.outputs.output_1 }}"
          echo "OR: ${{ steps.ternary_logical.outputs.output_2 }}"
          echo "Both: ${{ steps.ternary_logical.outputs.output_3 }}"
          
          echo ""
          echo "=== IN Operator Test ==="
          echo "Service IN: ${{ steps.ternary_in.outputs.output_1 }}"
          echo "Environment IN: ${{ steps.ternary_in.outputs.output_2 }}"
          echo "Branch IN: ${{ steps.ternary_in.outputs.output_3 }}"
          
          echo ""
          echo "=== Mixed Operators Test ==="
          echo "Mixed 1: ${{ steps.ternary_mixed.outputs.output_1 }}"
          echo "Mixed 2: ${{ steps.ternary_mixed.outputs.output_2 }}"
          echo "Mixed 3: ${{ steps.ternary_mixed.outputs.output_3 }}"
          
          echo ""
          echo "=== CONTAINS Operator Test ==="
          echo "CONTAINS 1: ${{ steps.ternary_contains.outputs.output_1 }}"
          echo "CONTAINS 2: ${{ steps.ternary_contains.outputs.output_2 }}"
          echo "CONTAINS 3: ${{ steps.ternary_contains.outputs.output_3 }}"
          
          echo ""
          echo "=== NOT Operator Test ==="
          echo "NOT 1: ${{ steps.ternary_not.outputs.output_1 }}"
          echo "NOT 2: ${{ steps.ternary_not.outputs.output_2 }}"
          echo "NOT 3: ${{ steps.ternary_not.outputs.output_3 }}"
          
          echo ""
          echo "=== EMPTY Operator Test ==="
          echo "EMPTY 1: ${{ steps.ternary_empty.outputs.output_1 }}"
          echo "EMPTY 2: ${{ steps.ternary_empty.outputs.output_2 }}"
          echo "EMPTY 3: ${{ steps.ternary_empty.outputs.output_3 }}"
          
          echo ""
          echo "=== NOT_EMPTY Operator Test ==="
          echo "NOT_EMPTY 1: ${{ steps.ternary_not_empty.outputs.output_1 }}"
          echo "NOT_EMPTY 2: ${{ steps.ternary_not_empty.outputs.output_2 }}"
          echo "NOT_EMPTY 3: ${{ steps.ternary_not_empty.outputs.output_3 }}"
          
          echo ""
          echo "=== Combined New Operators Test ==="
          echo "Combined 1: ${{ steps.ternary_combined.outputs.output_1 }}"
          echo "Combined 2: ${{ steps.ternary_combined.outputs.output_2 }}"
          echo "Combined 3: ${{ steps.ternary_combined.outputs.output_3 }}"
          
          echo ""
          echo "=== Error Test ==="
          if [[ "${{ steps.ternary_error.outcome }}" == "failure" ]]; then
            echo "✅ Error test passed: Action failed as expected when exceeding maximum conditions"
          else
            echo "❌ Error test failed: Action should have failed when exceeding maximum conditions"
            exit 1
          fi