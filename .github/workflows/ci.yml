name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'backup/**/*'
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Select the environment
        required: false
      branch:
        type: choice
        options:
          - qa
          - dev
        description: Select the branch
        required: false
        default: qa
      test:
        type: string
        description: Select the test
        required: false
      service:
        description: Which service to be built. game or batch or etc...
        required: false
        type: choice
        options:
          - game
          - batch
      env:
        type: string
        description: Select the env
        required: false

permissions:
  contents: read

jobs:
  build-and-push-docker:
    name: Build and Push Docker
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5001:5000

    env:
      TEST_TAG: localhost:5001/actions/ternary-operator:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set Variable
        id: set_vars
        uses: somaz94/env-output-setter@v1
        with:
          env_key: 'SERVICE,ENVIRONMENT,TEST,ENV,BRANCH'
          env_value: "${{ github.event.inputs.service || 'game' }},${{ github.event.inputs.environment || 'qa' }},${{ github.event.inputs.test || 'prod' }},${{ github.event.inputs.env || 'xov' }},${{ github.event.inputs.branch || 'qa' }}"
          output_key: 'SERVICE,ENVIRONMENT,TEST,ENV,BRANCH'
          output_value: "${{ github.event.inputs.service || 'game' }},${{ github.event.inputs.environment || 'qa' }},${{ github.event.inputs.test || 'prod' }},${{ github.event.inputs.env || 'xov' }},${{ github.event.inputs.branch || 'qa' }}"

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build the Container
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.TEST_TAG }}

      - name: Run the Container
        env:
          INPUT_CONDITIONS: >-
            SERVICE IN game,batch,api,
            ENVIRONMENT == dev,
            TEST == prod,
            ENV IN xov,dev,qa,
            BRANCH == dev,
            SERVICE == game,
            ENVIRONMENT == qa,
            TEST == stage,
            ENV == dev,
            BRANCH IN main,develop
          INPUT_TRUE_VALUES: >-
            service-true,environment-true,test-true,env-true,branch-true,
            service-true-2,environment-true-2,test-true-2,env-true-2,branch-true-2
          INPUT_FALSE_VALUES: >-
            service-false,environment-false,test-false,env-false,branch-false,
            service-false-2,environment-false-2,test-false-2,env-false-2,branch-false-2
        run: |
          docker run \
            --env INPUT_CONDITIONS="${{ env.INPUT_CONDITIONS }}" \
            --env INPUT_TRUE_VALUES="${{ env.INPUT_TRUE_VALUES }}" \
            --env INPUT_FALSE_VALUES="${{ env.INPUT_FALSE_VALUES }}" \
            --volume "${{ github.workspace }}:/usr/src" \
            --rm ${{ env.TEST_TAG }}

    outputs:
      service: ${{ steps.set_vars.outputs.SERVICE}}
      environment: ${{ steps.set_vars.outputs.ENVIRONMENT }}
      test: ${{ steps.set_vars.outputs.TEST }}
      env: ${{ steps.set_vars.outputs.ENV }}
      branch: ${{ steps.set_vars.outputs.BRANCH }}

  test-action:
    name: Test Extract Commit Action
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set Variables from Outputs
        run: |
          # shellcheck disable=SC2086
          {
            echo "SERVICE=${{ needs.build-and-push-docker.outputs.service }}"
            echo "ENVIRONMENT=${{ needs.build-and-push-docker.outputs.environment }}"
            echo "TEST=${{ needs.build-and-push-docker.outputs.test }}"
            echo "ENV=${{ needs.build-and-push-docker.outputs.env }}"
            echo "BRANCH=${{ needs.build-and-push-docker.outputs.branch }}"
          } >> $GITHUB_ENV # Grouping commands to address SC2129

      - name: Test Local Action
        id: ternary
        uses: ./
        with:
          conditions: >-
            SERVICE IN game,batch,api,
            ENVIRONMENT == dev,
            TEST == prod,
            ENV IN xov,dev,qa,
            BRANCH == dev,
            SERVICE == game,
            ENVIRONMENT == qa,
            TEST == stage,
            ENV == dev,
            BRANCH IN main,develop
          true_values: >-
            service-true,environment-true,test-true,env-true,branch-true,
            service-true-2,environment-true-2,test-true-2,env-true-2,branch-true-2
          false_values: >-
            service-false,environment-false,test-false,env-false,branch-false,
            service-false-2,environment-false-2,test-false-2,env-false-2,branch-false-2
          debug_mode: true
      - name: Test Comparison Operators
        id: ternary_comparison
        uses: ./
        with:
          conditions: >-
            SERVICE == game,
            SERVICE != batch,
            ENVIRONMENT == qa
          true_values: >-
            equal-pass,not-equal-pass,qa-pass
          false_values: >-
            equal-fail,not-equal-fail,qa-fail
          debug_mode: true

      - name: Test Logical Operators
        id: ternary_logical
        uses: ./
        with:
          conditions: >-
            SERVICE == game && ENVIRONMENT == qa,
            SERVICE == game || SERVICE == batch,
            BRANCH == qa && ENV == xov
          true_values: >-
            and-pass,or-pass,both-pass
          false_values: >-
            and-fail,or-fail,both-fail
          debug_mode: true

      - name: Test IN Operator
        id: ternary_in
        uses: ./
        with:
          conditions: >-
            SERVICE IN game,batch,api,
            ENVIRONMENT IN dev,qa,stage,prod,
            BRANCH IN main,develop,qa
          true_values: >-
            service-in-pass,env-in-pass,branch-in-pass
          false_values: >-
            service-in-fail,env-in-fail,branch-in-fail
          debug_mode: true

      - name: Test Mixed Operators
        id: ternary_mixed
        uses: ./
        with:
          conditions: >-
            SERVICE IN game,batch && ENVIRONMENT == qa,
            SERVICE == game || BRANCH IN main,develop,
            ENV == xov && TEST == prod
          true_values: >-
            mixed-1-pass,mixed-2-pass,mixed-3-pass
          false_values: >-
            mixed-1-fail,mixed-2-fail,mixed-3-fail
          debug_mode: true

      - name: Test Error Case (Exceeding Maximum Conditions)
        id: ternary_error
        continue-on-error: true
        uses: ./
        with:
          conditions: >-
            SERVICE == game,
            ENVIRONMENT == dev,
            TEST == prod,
            ENV == xov,
            BRANCH == dev,
            SERVICE IN game,batch,
            ENVIRONMENT == qa,
            TEST == stage,
            ENV == dev,
            BRANCH IN main,develop,
            EXTRA == test
          true_values: >-
            1,2,3,4,5,6,7,8,9,10,11
          false_values: >-
            1,2,3,4,5,6,7,8,9,10,11

      - name: Verify Test Results
        run: |
          echo "=== Comparison Operators Test ==="
          echo "Equal: ${{ steps.ternary_comparison.outputs.output_1 }}"
          echo "Not Equal: ${{ steps.ternary_comparison.outputs.output_2 }}"
          echo "QA Check: ${{ steps.ternary_comparison.outputs.output_3 }}"
          
          echo ""
          echo "=== Logical Operators Test ==="
          echo "AND: ${{ steps.ternary_logical.outputs.output_1 }}"
          echo "OR: ${{ steps.ternary_logical.outputs.output_2 }}"
          echo "Both: ${{ steps.ternary_logical.outputs.output_3 }}"
          
          echo ""
          echo "=== IN Operator Test ==="
          echo "Service IN: ${{ steps.ternary_in.outputs.output_1 }}"
          echo "Environment IN: ${{ steps.ternary_in.outputs.output_2 }}"
          echo "Branch IN: ${{ steps.ternary_in.outputs.output_3 }}"
          
          echo ""
          echo "=== Mixed Operators Test ==="
          echo "Mixed 1: ${{ steps.ternary_mixed.outputs.output_1 }}"
          echo "Mixed 2: ${{ steps.ternary_mixed.outputs.output_2 }}"
          echo "Mixed 3: ${{ steps.ternary_mixed.outputs.output_3 }}"
          
          echo ""
          echo "=== Error Test ==="
          if [[ "${{ steps.ternary_error.outcome }}" == "failure" ]]; then
            echo "✅ Error test passed: Action failed as expected when exceeding maximum conditions"
          else
            echo "❌ Error test failed: Action should have failed when exceeding maximum conditions"
            exit 1
          fi

      - name: Print Output
        run: |
          echo "First condition result: ${{ steps.ternary.outputs.output_1 }}"
          echo "Second condition result: ${{ steps.ternary.outputs.output_2 }}"
          echo "Third condition result: ${{ steps.ternary.outputs.output_3 }}"
          echo "Fourth condition result: ${{ steps.ternary.outputs.output_4 }}"
          echo "Fifth condition result: ${{ steps.ternary.outputs.output_5 }}"
          echo "Sixth condition result: ${{ steps.ternary.outputs.output_6 }}"
          echo "Seventh condition result: ${{ steps.ternary.outputs.output_7 }}"
          echo "Eighth condition result: ${{ steps.ternary.outputs.output_8 }}"
          echo "Ninth condition result: ${{ steps.ternary.outputs.output_9 }}"
          echo "Tenth condition result: ${{ steps.ternary.outputs.output_10 }}"
